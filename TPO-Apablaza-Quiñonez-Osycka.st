Object subclass: #Civilizacion	instanceVariableNames: 'nombre colRegiones colRegPorConquistar dinero'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civilizacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colRegPorConquistar:		<Object>	colRegiones:		<Object>	dinero:		<Object>	nombre:		<Object>    Implementation Points!!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 17:18'!getDinero^dinero .! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 17:01'!agregarRegion:unaRegioncolRegiones add:unaRegion .! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 17:18'!turnoActualcolRegiones do:[:cadaReg|cadaReg comienzoTurno.dinero:=dinero+(cadaReg otorgarDinero ) ].! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:58'!getColRegiones^colRegiones .! !!Civilizacion methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 19:07'!inicializarCivilizacion:unNombre dinero:unDineronombre:=unNombre.dinero:=unDinero.colRegPorConquistar:=OrderedCollection new.colRegiones :=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civilizacion class	instanceVariableNames: ''!!Civilizacion class methodsFor: 'Constructor' stamp: 'LiamO 8/8/2018 17:15'!crearCivilizacion:unNombre dinero:unDinero|unaCivilizacion|unaCivilizacion:=self new.unaCivilizacion inicializarCivilizacion: unNombre dinero:unDinero. ^unaCivilizacion ! !Object subclass: #Edificio	instanceVariableNames: 'coste tiempo cuentaTiempo vida contadorTurno procesoConstruccion tiempoConstruccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Edificio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contadorTurno:		<Object>	coste:		<Object>	cuentaTiempo:		<Object>	poder:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:51'!verifCreacionCiviles^nil.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:52'!capacita^false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 20:11'!inicializarEdificio: unCoste tiempo:unTiempo cuentaTiempo:unCuenta vida:unaVida  contadorTurno:unContTurnocoste:=unCoste.tiempo:=unTiempo.cuentaTiempo:=unCuenta.vida:=unaVida.contadorTurno:=unContTurno.procesoConstruccion :=false.! !!Edificio methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:33'!verifDinero:dineroCivilizacion^(dineroCivilizacion ==coste)! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:34'!verifConstrucciones|finalizada|(procesoConstruccion )ifTrue:[finalizada :=self verifConstruccion].^finalizada.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Edificio class	instanceVariableNames: ''!!Edificio class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:39'!crearEdificio:unCoste tiempo:unTiempo cuentaTiempo:unCuentaTiempo vida:unaVida contadorTurno:unContadorTurno|unEdificio|unEdificio:= self new.unEdificio inicializarEdificio: unCoste tiempo:unTiempo  cuentaTiempo:unCuentaTiempo  vida:unaVida  contadorTurno: unContadorTurno.^unEdificio ! !Edificio subclass: #Aeropuerto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Aeropuerto commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:33'!verifConstruccion|bombardero|bombardero:=nil.(contadorTurno==tiempoConstruccion )ifTrue:[bombardero:=Bombardero crearBombardero.	contadorTurno:=0]ifFalse:[contadorTurno:=contadorTurno+1].^bombardero .! !!Aeropuerto methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:46'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:41'!construirBombardero:dinero|bombardero|bombardero:=nil.(dinero>=10)ifTrue:[(contadorTurno==tiempoConstruccion )ifTrue:[bombardero:=Bombardero crearBombardero.	contadorTurno:=0]ifFalse:[contadorTurno:=contadorTurno+1].].^bombardero .! !!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 20:32'!inicializarAeropuertotiempoConstruccion :=5.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aeropuerto class	instanceVariableNames: ''!!Aeropuerto class methodsFor: 'Constructor' stamp: 'LiamO 8/6/2018 20:31'!crearAeropuerto|unAeropuerto|unAeropuerto:= self crearEdificio: 30 tiempo:5  cuentaTiempo:0  vida:5  contadorTurno:0.unAeropuerto inicializarAeropuerto. ^unAeropuerto ! !Edificio subclass: #Casa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Casa commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Casa methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:50'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!Casa methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:49'!verifCreacionCiviles|civil|civil:=nil.(contadorTurno==tiempo)ifTrue:[civil:=Civil crearCivil.	contadorTurno:=0]ifFalse:[contadorTurno:=contadorTurno+1].^civil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Casa class	instanceVariableNames: ''!!Casa class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:25'!crearCasa|unaCasa|unaCasa:=self crearEdificio: 3 tiempo:2  cuentaTiempo:0  vida:2  contadorTurno:0. ^unaCasa.! !Edificio subclass: #EscuelaM	instanceVariableNames: 'civiles soldados tiempoCiv tiempoSold'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!EscuelaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 09:46'!testColSold^soldados.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:51'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:11'!entrenarCivil:unCivil dinero:dinero|exito|exito:=false.(dinero>=2)ifTrue:[civiles add:unCivil.exito:=true.civiles sortBlock: [:c1 :c2| c1 getTiempoCapacitacion >= c2 getTiempoCapacitacion ]].^exito.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:52'!capacita^true.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:03'!entrenarSoldado:unSoldado dinero:dinero|exito|exito:=false.(dinero>=3)ifTrue:[soldados add:unSoldado . exito:=true].^exito.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 11:25'!verifCapacitacionesCiviles|colSol|colSol:=civiles select:[:cadaCivil|(cadaCivil verifCapacitacion: tiempoCiv )].civiles:=civiles reject:[:cadaCiv|(cadaCiv verifCapacitacion:tiempoCiv)].^colSol.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:07'!inicializarEscuelaMciviles:=SortedCollection new.soldados:=SortedCollection new.tiempoCiv :=2.tiempoSold:=3.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:47'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 09:46'!testColCiviles^civiles.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EscuelaM class	instanceVariableNames: ''!!EscuelaM class methodsFor: 'Constructor' stamp: 'LiamO 8/8/2018 18:56'!crearEscuelaM|unaEscuelaM|unaEscuelaM:= self crearEdificio:10  tiempo:3  cuentaTiempo:0  vida:4  contadorTurno:0. unaEscuelaM inicializarEscuelaM  .^unaEscuelaM! !Edificio subclass: #Fabrica	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Fabrica commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Fabrica methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!Fabrica methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 08:11'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true]ifFalse:[cuentaTiempo :=cuentaTiempo+1].^construccion. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fabrica class	instanceVariableNames: ''!!Fabrica class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:49'!crearFabrica|unaFabrica|unaFabrica:=self crearEdificio: 20 tiempo:4  cuentaTiempo:0  vida:4  contadorTurno:0.^unaFabrica ! !Edificio subclass: #FabricaM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!FabricaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FabricaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!FabricaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:51'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FabricaM class	instanceVariableNames: ''!!FabricaM class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:51'!crearFabricaM|unaFabricaM|unaFabricaM:=self crearEdificio: 25 tiempo:5  cuentaTiempo:0  vida:5  contadorTurno:0.^unaFabricaM ! !Object subclass: #Juego	instanceVariableNames: 'colCivilizaciones colRegiones turno'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Juego commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colCivilizaciones:		<Object>	colRegiones:		<Object>    Implementation Points!!Juego methodsFor: 'Inicializador' stamp: 'LiamO 8/8/2018 17:30'!inicializarJuego:cantCivilizaciones|unaCiv unaReg reg regiones regRandom|colCivilizaciones :=OrderedCollection new.colRegiones:=OrderedCollection new.turno:=0.1 to: cantCivilizaciones do:[:cadaElto|unaCiv:=Civilizacion crearCivilizacion:cadaElto  dinero:5 .colCivilizaciones add:unaCiv].1 to: 32 do:[:cadaElto|unaReg:=Region crearRegion: cadaElto .colRegiones add:unaReg].colCivilizaciones do:[:cadaCiv|regRandom:=(1to:32)atRandom.cadaCiv agregarRegion:(colRegiones at:regRandom).(colRegiones at:regRandom) agregarUnidad: Civil crearCivil ].reg:=colRegiones at:1.regiones:=colRegiones select:[:cadaElto| (cadaElto getCoordenada =2)|(cadaElto getCoordenada=6)|(cadaElto getCoordenada=7)].reg asignarLimitrofe: regiones.reg:=colRegiones at:2.regiones:=colRegiones select:[:cadaElto| (cadaElto getCoordenada =1)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=6)|(cadaElto getCoordenada=7)].reg asignarLimitrofe:regiones.reg:=colRegiones at:3.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=9)].reg asignarLimitrofe:regiones.reg:=colRegiones at:4.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=10)].reg asignarLimitrofe:regiones.reg:= colRegiones at:5.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=10)].reg asignarLimitrofe: regiones.reg:=colRegiones at:6.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=1)|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=7)].reg asignarLimitrofe:regiones.reg:=colRegiones at:7.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=6)|(cadaElto getCoordenada=1)|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=13)].reg asignarLimitrofe:regiones.reg:=colRegiones at:8.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=13)].reg asignarLimitrofe: regiones.self ejecutarTurno: colCivilizaciones .! !!Juego methodsFor: 'Metodos' stamp: 'LiamO 6/27/2018 09:41'!getColCivilizaciones^colCivilizaciones .! !!Juego methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:29'!ejecutarTurno:civilizacionescivilizaciones do:[:cadaCiv|cadaCiv turnoActual].! !!Juego methodsFor: 'Metodos' stamp: 'LiamO 6/27/2018 09:56'!getColRegiones^colRegiones.! !!Juego methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:25'!ejecutarTurno! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: ''!!Juego class methodsFor: 'Constructor' stamp: 'LiamO 6/27/2018 09:45'!crearJuego:cantCivilizaciones|unJuego|unJuego:=self new.unJuego inicializarJuego: cantCivilizaciones .^unJuego.! !Object subclass: #Region	instanceVariableNames: 'coordenada colRegionesLimitrofes colUnidades colEdificios'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Region commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colEdificios:		<Object>	colRegionesLimitrofes:		<Object>	colUnidades:		<Object>	coordenada:		<Object>    Implementation Points!!Region methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 08:30'!batalla:coordEnemiga|laRegion existUnidades mejorUni victoria|laRegion:=self recuperarRegion: coordEnemiga.victoria:=false.existUnidades :=laRegion verifExistenciaUnidades.(existUnidades )ifTrue:[mejorUni:=laRegion obtenerMejorUnidad .	victoria:=(laRegion atacar:mejorUni).].^victoria .! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/27/2018 15:06'!desplazarUnidades: colUniTrans conTransporte:unTrans hacia:unaCoord|region seguirDesplazando|seguirDesplazando:=false.region:=self recuperarRegion: unaCoord.(unTrans getDespTemp>0)ifTrue:[colUniTrans do:[:cadaUnidad|self quitarUnidad:cadaUnidad].	colUnidades remove:unTrans.	(unTrans soyUnTanque==false)	ifTrue:[unTrans calcularVida].	colUniTrans do:[:cadaUni|unTrans hacerSubir: cadaUni].	seguirDesplazando:=region realizarDespTrans:unTrans.].^seguirDesplazando.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 17:26'!verifExistenciaUnidades|existUnidades|existUnidades:=(colUnidades isNotEmpty).^existUnidades.! !!Region methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 21:03'!construir:dineroCivilizacion construccion:tipoConstruccion|civil edificio|(tipoConstruccion=='casa')ifTrue: [ (Edificio verifDinero:dineroCivilizacion)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir  .edificio:=civil crearCasa]]].						^edificio ! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:45'!getColRegLimitrofes^colRegionesLimitrofes .! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/13/2018 18:36'!realizarDesplazamiento:unaUnidad|continuar|continuar:=true.self agregarUnidad: unaUnidad.unaUnidad restarDespTemp.(unaUnidad getDespTemp==0)ifTrue:[unaUnidad resetearDespTemp.	continuar:=false.].^continuar.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 19:01'!obtenerMejorDefensor|colMejorDefensor|colMejorDefensor:=colUnidades asSortedCollection: [ :u1 :u2|(u1 getAtaque) >=(u2 getAtaque)].^colMejorDefensor at:1.! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/27/2018 15:08'!realizarDespTrans: unTransp|continuar|continuar:=true.self agregarUnidad:unTransp.unTransp restarDespTemp.unTransp getColUnidTransp do:[:cadaUni| self agregarUnidad:cadaUni].(unTransp getDespTemp==0)ifTrue:[unTransp resetearDespTemp.	continuar:=false.]. ^continuar.! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/13/2018 18:44'!desplazarUnidad: unaUnidad hacia:coordRegion|region seguirDesplazando|region:=self recuperarRegion: coordRegion.seguirDesplazando:=false.(unaUnidad getDespTemp>0)ifTrue:[self quitarUnidad: unaUnidad.	seguirDesplazando:=region realizarDesplazamiento:unaUnidad.].^seguirDesplazando.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:50'!verificarCreacionCivilescolEdificios do:[:cadaElto|cadaElto verifCreacionCiviles 	ifNotNil:[colUnidades add:cadaElto.]].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:33'!getCoordenada^coordenada.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:56'!asignarLimitrofe:colRegionescolRegiones do:[:cadaElto| colRegionesLimitrofes add:cadaElto].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:57'!otorgarDinero^(5 to:8)atRandom.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 17:14'!recuperarRegion:coordEnemiga^colRegionesLimitrofes detect:[:cadaElto|cadaElto getCoordenada =coordEnemiga].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 19:49'!agregarUnidad:unaUnidadcolUnidades add:unaUnidad.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 19:26'!atacar:mejorUni|mejorDefensor dañoTotal muerto victoria dañoAt dañoDef test|mejorDefensor:=self obtenerMejorDefensor .test:=0.dañoTotal:=0.victoria:=false.dañoAt:=mejorUni obtenerDañoAtaque .dañoDef:=mejorDefensor obtenerDañoDefensa .dañoTotal:=dañoAt -dañoDef .(dañoTotal>=0)ifTrue:[muerto:=(mejorDefensor disminuirVida: dañoTotal).	(muerto)		ifTrue:[colUnidades remove:mejorDefensor. victoria :=true.test:=5.]	]ifFalse:[dañoTotal:=(dañoTotal*(-1)).	muerto:=(mejorUni disminuirVida: dañoTotal).	(muerto)	ifTrue:[victoria:=false.test:=10.]].^test.! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/14/2018 00:08'!quitarUnidad:unaUnidadcolUnidades remove:unaUnidad.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 11:27'!comienzoTurno|nuevasUnits colEscM|"colEdificios do:[:cadaEdif|cadaEdif verifConstrucciones 	ifTrue:[colEdificios add:cadaEdif.]].self verifExistenciaUnidades ."colEscM:=colEdificios select:[:cadaEdif|cadaEdif capacita].colEscM collect:[:cadaEscM|cadaEscM verifCapacitacionesCiviles ].! !!Region methodsFor: 'Metodos' stamp: 'Anonymous 8/15/2018 00:56'!desplazarTransporte:unTransporte|continuar|continuar:=true.self agregarUnidad: unTransporte.unTransporte getColUnidTransp do:[:cadaUni|self agregarUnidad:cadaUni.].unTransporte restarDespTemp.(unTransporte getDespTemp==0)ifTrue:[unTransporte resetearDespTemp.	continuar:=false.].^continuar.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 18:28'!obtenerMejorUnidad|colMejorAtaque|colMejorAtaque:=colUnidades asSortedCollection: [ :u1 :u2|(u1 getAtaque) >=(u2 getAtaque)].^colMejorAtaque at:1.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:32'!agregarEdif:unEdifcolEdificios add:unEdif.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:30'!getColUnidades^colUnidades .! !!Region methodsFor: 'inicializador' stamp: 'Fabio 6/24/2018 19:02'!inicializadorRegion:unaCoordenadacoordenada:=unaCoordenada.colRegionesLimitrofes:=OrderedCollection new.colEdificios :=OrderedCollection new.colUnidades :=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Region class	instanceVariableNames: ''!!Region class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:06'!crearRegion:unaCoordenada |unaRegion|unaRegion:=self new.unaRegion inicializadorRegion: unaCoordenada.^unaRegion ! !Object subclass: #Unidad	instanceVariableNames: 'coste tiempo vida ataque defensa desplazamiento despTemp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Unidad commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ataque:		<Object>	coste:		<Object>	defensa:		<Object>	despTemp:		<Object>	desplazamiento:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Unidad methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 18:01'!inicializarUnidad: unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesp desplazamientoTemp:unDespTempcoste:=unCoste.tiempo:=unTiempo.vida:=unaVida.ataque:=unAtaque.defensa:=unaDefensa.desplazamiento:=unDesp.despTemp:=unDespTemp.! !!Unidad methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^false.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 18:05'!getAtaque^ataque.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:12'!obtenerDañoDefensa|dañoDefensa|dañoDefensa:=defensa*(10 atRandom).^dañoDefensa.! !!Unidad methodsFor: 'Metodos' stamp: 'Anonymous 8/13/2018 18:31'!restarDespTempdespTemp:=despTemp-1.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:55'!getVida^vida .! !!Unidad methodsFor: 'Metodos' stamp: 'Anonymous 8/13/2018 17:38'!getDespTemp^despTemp.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:11'!obtenerDañoAtaque|dañoAtaque|dañoAtaque:=ataque*(10 atRandom ).^dañoAtaque .! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:31'!disminuirVida:dañoTotal|muerto|muerto:=false.vida:=vida-dañoTotal .(vida<=0)ifTrue:[muerto:=true].^muerto.! !!Unidad methodsFor: 'Metodos' stamp: 'Anonymous 8/13/2018 18:34'!resetearDespTempdespTemp:=desplazamiento.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Unidad class	instanceVariableNames: ''!!Unidad class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:04'!crearUnidad:unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp|unidad|unidad:= self new.unidad inicializarUnidad: unCoste tiempo:unTiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento: unDesplazamiento  desplazamientoTemp:unDespTemp. ^unidad! !Unidad subclass: #Civil	instanceVariableNames: 'tiempoCapacitacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civil commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:18'!verifCapacitacion:unTiempo|finCapacitacion|finCapacitacion :=false.(unTiempo=tiempoCapacitacion  )ifTrue:[finCapacitacion :=true]ifFalse:[tiempoCapacitacion :=tiempoCapacitacion +1].^finCapacitacion .! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:37'!crearFabrica|unaFabrica|unaFabrica := Fabrica crearFabrica.^unaFabrica! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:11'!getTiempoCapacitacion^tiempoCapacitacion .! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:08'!inicializarCiviltiempoCapacitacion :=0.! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:26'!crearCasa|unaCasa|unaCasa := Casa crearCasa.^unaCasa! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civil class	instanceVariableNames: ''!!Civil class methodsFor: 'Constructor' stamp: 'LiamO 8/8/2018 19:09'!crearCivil|unCivil|unCivil:=self crearUnidad:0  tiempo:2  vida:1  ataque:0  defensa:1  desplazamiento:1  despTemp:1 .unCivil inicializarCivil .^unCivil.! !Unidad subclass: #Soldado	instanceVariableNames: 'tiempoCapacitacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Soldado commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:12'!getTIempoCapacitacion^tiempoCapacitacion .! !!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:10'!inicializarSoldadotiempoCapacitacion :=0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Soldado class	instanceVariableNames: ''!!Soldado class methodsFor: 'Constructor' stamp: 'LiamO 8/8/2018 19:10'!crearSoldado|soldado|soldado:=self crearUnidad: 2 tiempo:3  vida:10  ataque:1  defensa:1  desplazamiento:1  despTemp:1.soldado inicializarSoldado .^soldado ! !Soldado subclass: #SoldadoPlus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!SoldadoPlus commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SoldadoPlus class	instanceVariableNames: ''!!SoldadoPlus class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:13'!crearSoldadoplus|soldadoplus|soldadoplus:= self crearUnidad: 3 tiempo:4  vida:15  ataque:2  defensa:1  desplazamiento:2  despTemp:2.^soldadoplus  ! !Unidad subclass: #Transporte	instanceVariableNames: 'transp colUnidTransp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Transporte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	transp:		<Object>    Implementation Points!!Transporte methodsFor: 'Modificadores' stamp: 'LiamO 8/6/2018 07:26'!setTransp:unTransptransp:=unTransp.colUnidTransp :=OrderedCollection new.! !!Transporte methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:55'!getColUnidTransp^colUnidTransp .! !!Transporte methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:50'!hacerSubir:unaUnidadcolUnidTransp add:unaUnidad.! !!Transporte methodsFor: 'Metodos' stamp: 'Anonymous 8/27/2018 14:18'!soyUnTanque^false.! !!Transporte methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:58'!calcularVida|col suma|suma:=0.col:=self getColUnidTransp.col do:[:cadaElto| suma:=suma + cadaElto getVida ].vida :=vida+suma.! !!Transporte methodsFor: 'Metodos' stamp: 'Anonymous 8/27/2018 14:53'!inicializarUnidadescolUnidTransp:=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Transporte class	instanceVariableNames: ''!!Transporte class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:23'!crearTransporte:unCoste tiempo:untiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp transp:unTransp |unTransporte|unTransporte :=self crearUnidad: unCoste tiempo:untiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento:unDesplazamiento  despTemp:unDespTemp.unTransporte setTransp: unTransp.^unTransporte  ! !Transporte subclass: #Bombardero	instanceVariableNames: 'colUnidades'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Bombardero commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Bombardero methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:38'!getCoste^coste .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bombardero class	instanceVariableNames: ''!!Bombardero class methodsFor: 'Constructor' stamp: 'Anonymous 8/15/2018 00:36'!crearBombardero|unBombardero|unBombardero:= self crearTransporte:10  tiempo:8  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6.self inicializarUnidades.^unBombardero  ! !Transporte subclass: #Camion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Camion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Camion class	instanceVariableNames: ''!!Camion class methodsFor: 'Constructor' stamp: 'Anonymous 8/27/2018 14:59'!crearCamion|unCamion|unCamion:= self crearTransporte: 10 tiempo:8  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6.unCamion inicializarUnidades.^unCamion  ! !Transporte subclass: #Tanque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Tanque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Tanque methodsFor: 'Metodos' stamp: 'Anonymous 8/27/2018 14:17'!soyUnTanque^true.! !!Tanque methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:14'!getAtaque^ataque.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tanque class	instanceVariableNames: ''!!Tanque class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:31'!crearTanque|unTanque|unTanque:=self crearTransporte: 8 tiempo:6  vida:25  ataque:4  defensa:3  desplazamiento:2  despTemp:2  transp:1.^unTanque ! !